

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex, normal;
attribute vec2 texture;
varying vec2 v_texcoord;
uniform mat4 ModelViewMatrix, ProjectionMatrix, NormalMatrix;
uniform vec3 light;
varying vec3 color;

void main() {
    v_texcoord = texture;

    vec4 vertPos4 = ModelViewMatrix * vec4(vertex, 1.0);
    vec3 vertPos = vec3(vertPos4) / vertPos4.w;
    vec3 normalInterp = vec3(NormalMatrix * vec4(normal, 0.0));
    gl_Position = ProjectionMatrix * vertPos4;

    float shininessVal = 80.0;

    vec3 N = normalize(normalInterp);
    vec3 L = normalize(light - vertPos);
    // Lambert's cosine law
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);      // Reflected light vector
        vec3 V = normalize(-vertPos); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, shininessVal);
    }
    float Ka = 1.0;
    float Kd = 1.0;
    float Ks = 1.0;
    vec3 ambientColor = vec3(0.3);
    vec3 diffuseColor = vec3(0.7);
    vec3 specularColor = vec3(1.0);  
    color = vec3(Ka * ambientColor +
                Kd * lambertian * diffuseColor +
                Ks * specular * specularColor);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec2 v_texcoord;
uniform sampler2D tmu;
uniform float s;

varying vec3 color;
void main() {
    vec4 texColor = texture2D(tmu, v_texcoord);
    gl_FragColor = texColor*vec4(color,1.0);
    if(s<0.0){
        gl_FragColor = vec4(1.0);
    }
}`;